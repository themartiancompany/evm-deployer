#!/usr/bin/env node

const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_contract_factory =
  _ethers.ContractFactory;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_json_read =
  _libcrash._json_read;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
_path_join =
  _libcrash._path_join;
const
  _wallet_get_module =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _wallet_get_module._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider._provider_get;

function
  _global_variables() {
  app_name =
    "deployer";
  wallet_seed =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  target_network =
    "";
  api_key_path =
    "";
  quiet =
    "";
}


function
  _msg_info_provider_generated(
    _provider) {
  let
    _msg,
    _template;
  _template =
    "provider '{_provider}' generated";
  _msg =
    _template.replaceAll(
      "{_provider}",
      _provider);
  _msg_info(
    _msg);
}


function
  _msg_info_contract_deployed(
    _contract) {
  let
    _msg,
    _template;
  _template =
    "deployed contract '{_contract}'";
  _msg =
    _template.replaceAll(
      "{_contract}",
      _contract);
  _msg_info(
    _msg);
}


async function
  _evm_deployer(
    _wallet_seed,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _target_network,
    _api_key_path) {
  let
    _api_key,
    _contract,
    _contract_abi,
    _contract_bytecode,
    _contract_compiler_output,
    _factory,
    _wallet,
    _wallet_get_opts,
    _wallet_password,
    _wallet_path_list,
    _wallet_path;
  _wallet_password =
    "";
  _wallet_path_list = [
    _dirname(
      _wallet_seed),
    "wallet.dat"
  ];
  _wallet_path =
    _path_join(
      _wallet_path_list);
  if ( _api_key_path != "" ) {
    _api_key =
      _file_read(
        _api_key_path);
  }
  else if ( _api_key_path == "" ) {
    _api_key =
      "";
  }
  _provider =
    _provider_get(
      _target_network,
      _api_key);
  _msg_info_provider_generated(
    _provider);
  _wallet_get_opts=[
    _wallet_path,
    _wallet_password,
    _wallet_seed,
    _provider
  ];
  _wallet =
    _wallet_get.apply(
      null,
      _wallet_get_opts);
  if ( _contract_bytecode_path != "" ) {
    if ( _contract_abi_path == "" ) {
      _msg_error(
        "Contract ABI is needed if deploying with bytecode.",
        1);
    }
    _contract_bytecode =
      _file_read(
        _contract_bytecode_path);
    _contract_abi =
      _json_read(
        _contract_abi_path);
    _factory = new
      _contract_factory(
        _contract_abi,
        _contract_bytecode);
  }
  else if ( _contract_compiler_output_path != "" ) {
    _contract_compiler_output =
      _json_read(
        _contract_compiler_output_path);
    _factory =
      _contract_factory.fromSolidity(
        _contract_compiler_output);
  }
  _factory =
    _factory.connect(
      _wallet);
  _contract = await
    _factory.deploy();
  _msg_info_contract_deployed(
    _contract);
  console.log(
    _contract.target);
}

function
  _config_show() {
  let
    _line,
    _text;
  _text =
    [];
  _text.push(
    "             Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "          Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "                 API Key: {api_key}".replace(
      "{api_key}",
      api_key_path));
  _text.push(
    "            Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "       Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  deployer",
    "    <quiet>",
    "    <seed_path>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    (<target_network>)",
    "    (<api_key>)"];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}


function _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 5 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 6 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 7 ) {
        target_network =
          _value;
      }
      if ( _index == 8 ) {
        api_key_path =
          _value;
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        quiet =
          "n";
        _usage(
          0);
      }
  });
  if ( contract_bytecode_path == "" &&
       contract_compiler_output_path == "" ) {
    quiet =
      "n";
    _usage(
      1);
  }
}

function 
  _overrides_set() {
  if ( target_network == "" ) {
    _msg_info(
      "No network selected, setting gnosis");
    target_network =
      "https://rpc.gnosischain.com";
  }
}


if ( _cmdline_check(
       "deployer") == true ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    wallet_seed,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    target_network,
    api_key_path,
  ];
  _evm_deployer.apply(
    null,
    app_opts);
}

module.exports = {
  _evm_deployer:
    _evm_deployer
};

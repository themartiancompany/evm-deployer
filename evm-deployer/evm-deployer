#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  deploy_date=""
  target_contracts=()
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  contract_abi=""
  contract_bytecode=""
  compiler_backend=""
  evm_version=""
  solc_version=""
  contract_compiler_output=""
  api_key=""
  wallet_name=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'node' \
    'nodejs'
  _check_cmd \
    "jq"
  _check_cmd \
    'solidity-compiler'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_wallet_address_cmd() {
  local \
    _command="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-wallet"
  echo \
    "${_lib}/address-${_command}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}

_network_setup() {
  if [[ "${_network}" == "gnosis" ]]; then
    _rpc="https://rpc.gnosischain.com"
    _network_backend="${_network}"
  elif [[ "${_network}" == "ethereum" ]]; then
    _network_backend="etherscan"
  else
    _network_backend="${_network}"
  fi
}

_api_key_read() {
  local \
    _path="${1}"
  if [ ! -e "${_path}" ]; then
    _msg_error \
      "service api key file '${_path}' not found" \
      1
  fi
  cat \
    "${_path}"
}

_evm_deployer() {
  local \
    _wallet_path="${1}" \
    _wallet_password="${2}" \
    _wallet_seed="${3}" \
    _network="${4}" \
    _api_key_path="${5}" \
    _contract_bytecode="${6}" \
    _compiler_backend="${7}" \
    _solc_version="${8}" \
    _evm_version="${9}" \
    _target_contracts=() \
    _contract_filename \
    _contract_name \
    _cmd \
    _args=() \
    _api_key \
    _network_backend \
    _tmp
  shift \
    9
  _target_contracts+=(
    "$@"
  )
  _cmd="$( \
    _get_lib)/${app_name}/deployer"
  _network_setup
  if [[ "${_contract_bytecode}" == "" ]]; then
    _contract_filename="$( \
      basename \
        "${_target_contracts}")"
    _contract_name="${_contract_filename%%.*}"
    _bytecode_dir="$( \
      mktemp \
        -d)"
    _solidity_compiler_opts+=(
      -o
        "${_bytecode_dir}"
    )
    if [[ "${_compiler_backend}" != "" ]]; then
      _solidity_compiler_opts+=(
        -b
          "${_compiler_backend}"
      )
    fi
    if [[ "${_solc_version}" != "" ]]; then
      _solidity_compiler_opts+=(
        -C
          "${_solc_version}"
      )
    fi
    if [[ "${_evm_version}" != "" ]]; then
      _solidity_compiler_opts+=(
        -e
          "${_evm_version}"
      )
    fi
    solidity-compiler \
      "${_solidity_compiler_opts[@]}" \
      "${_target_contracts[@]}"
    _contract_abi="${_bytecode_dir}/${_contract_name}.abi.json"
    _contract_bytecode="${_bytecode_dir}/${_contract_name}.bin"
    _contract_compiler_output="${_bytecode_dir}/contracts/${_contract_name}.sol/${_contract_name}.json"
  fi
  _args+=(
    "${quiet}"
    "${_wallet_seed}"
    "${_contract_abi}"
    "${_contract_bytecode}"
    "${_contract_compiler_output}"
    "${_network_backend}"
    "${_api_key_path}"
  )
  _msg_info \
    "Running node with options '${_args[*]}'."
  _node_run \
    "${_cmd}" \
    "${_args[@]}"
}

_contract_bytecode_auto_detect() {
  local \
    _bytecode \
    _name \
    _source \
    _target
  _bytecode=""
  _source="${target_contracts}"
  _name="${_source%.*}"
  _target="${_name}.bin"
  if [ -e "${_target}" ]; then
    _bytecode="${_target}"
  fi
  _set_override \
    "contract" \
    "bytecode" \
    "${_bytecode}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "deploy" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "target" \
    "network" \
    "Gnosis"
  _api_key_auto_detect \
    "${target_network}"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "${wallet_name}")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "${wallet_name}"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "${wallet_name}"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "${wallet_name}" \
           "address")"
  _set_override \
    "compiler" \
    "backend" \
    ""
  _set_override \
    "solc" \
    "version" \
    ""
  _set_override \
    "evm" \
    "version" \
    ""
  if [[ "${target_contracts[*]}" != "" ]]; then
    _contract_bytecode_auto_detect
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _networks_amount \
    _usage_text
  _networks_amount="$( \
    evm-chains-info \
      -i \
        "amount")"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
EVM network deployer

Usage:
  ${app_name}
    [options]
    <contract_file>

  networks:
    total EVM networks available:
      ${_networks_amount}
    see which with "evm-chains-info"

  options:
     -w <wallet_path>         Wallet path.
                              Default: ${wallet_path}
     -p <wallet_password>     Wallet password.
                              Default: ${wallet_password}
     -s <wallet_seed>         Wallet seed path.
                              Default: ${wallet_seed}
     -n <network>             EVM network name.
                              Default: ${target_network}
     -k <api_key>             Etherscan-like service key.
                              Default: ${api_key}
     -B <contract_bytecode>   Contract bytecode.
                              Default: ${contract_bytecode}
     -b <compiler_backend>    It can be 'solc' or 'hardhat'.
                              Default: ${compiler_backend}
     -C <solc_version>        Solc version.
                              Default: ${solc_version}
     -e <evm_version>         EVM version.
                              Default: ${evm_version}

     -h                       This message.
     -c                       Enable color output
     -v                       Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "              Deploy date:   ${deploy_date}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "        Contract bytecode:   ${contract_bytecode}"
  _msg_info "             Solc version:   ${solc_version}"
  _msg_info "              EVM version:   ${evm_version}"
  _msg_info "         Compiler backend:   ${compiler_backend}"
  _msg_info "         Target contracts:   ${target_contracts[*]}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
while \
  getopts \
    'w:p:s:n:k:b:C:e:B:cvh?' \
    arg; do
  case \
    "${arg}" in
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    b) override_compiler_backend="${OPTARG}" ;;
    C) override_solc_version="${OPTARG}" ;;
    e) override_evm_version="${OPTARG}" ;;
    B) override_contract_bytecode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 == $# )); then
  _msg_error \
    "no contracts given" \
    1
fi
target_contracts+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${contract_bytecode}"
  "${compiler_backend}"
  "${solc_version}"
  "${evm_version}"
  "${target_contracts[@]}"
)
_evm_deployer \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:

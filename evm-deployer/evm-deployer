#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  deploy_date=""
  target_contracts=()
  contract_abi=""
  contract_bytecode=""
  contract_compiler_output=""
  compiler_backend=""
  evm_version=""
  solc_version=""
  cache_dir=""
  contract_output_file=""
  tx_deployment_output_file=""
  index_publish=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-source-publish' \
    'evm-contracts-source-index'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'jq'
  _check_cmd \
    'node-run'
  _check_cmd \
    'solidity-compiler'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_bytecode_dir_setup() {
  local \
    _target_contract="${1}" \
    _contract_name="${2}" \
    _contract_filename="${3}" \
    _target_network="${4}" \
    _contract_dir \
    _contract_hash
  _contract_hash="$( \
    _file_hash \
      "${_target_contract}")"
  _contract_dir="${_cache_dir}/${_contract_filename}/${_contract_hash}"
  _output_dir="${_contract_dir}/${_target_network}/build"
  _bytecode_dir="$( \
    mktemp \
      -p \
      "${_output_dir}")"
  _compiler_output_dir="${_bytecode_dir}/contracts/${_contract_name}.sol"
}

_contract_build() {
  local \
    _target_contract="${1}" \
    _target_network="${2}" \
    _compiler_backend="${3}" \
    _solc_version="${4}" \
    _evm_version="${5}" \
    _solidity_compiler_opts=() \
    _contract_filename \
    _contract_name \
    _compiler_output_dir \
    _bytecode_dir
  if [[ "${quiet}" == "n" ]]; then
    _solidity_compiler_opts+=(
      -v
    )
  fi
  _contract_filename="$( \
    basename \
      "${_target_contract}")"
  _contract_name="${_contract_filename%%.*}"
  _bytecode_dir_setup \
    "${_target_contract}" \
    "${_contract_name}" \
    "${_contract_filename}" \
    "${_target_network}"
  _solidity_compiler_opts+=(
    -o
      "${_bytecode_dir}"
  )
  if [[ "${_compiler_backend}" != "" ]]; then
    _solidity_compiler_opts+=(
      -b
        "${_compiler_backend}"
    )
  fi
  if [[ "${_solc_version}" != "" ]]; then
    _solidity_compiler_opts+=(
      -C
        "${_solc_version}"
    )
  fi
  if [[ "${_evm_version}" != "" ]]; then
    _solidity_compiler_opts+=(
      -e
        "${_evm_version}"
    )
  fi
  solidity-compiler \
    "${_solidity_compiler_opts[@]}" \
    "${_target_contract}"
  if [[ "${_compiler_backend}" == "solc" ]]; then
    _contract_abi="${_bytecode_dir}/${_contract_name}.abi.json"
    _contract_bytecode="${_bytecode_dir}/${_contract_name}.bin"
  fi
  if [[ "${_compiler_backend}" == "hardhat" ]]; then
    _contract_compiler_output="${_compiler_output_dir}/${_contract_name}.json"
  fi
}

_contract_index_publish() {
  local \
    _target_contract="${1}" \
    _target_network="${2}" \
    _solc_version="${3}" \
    _evm_version="${4}" \
    _contract_output_file="${5}" \
    _tx_deployment_output_file="${6}" \
    _evm_contract_publish_opts=() \
    _jq_opts=() \
    _msg=() \
    _contract_address \
    _tx_deployment
  if [[ "${quiet}" == "n" ]]; then
    _evm_contract_source_publish_opts+=(
      -v
    )
  fi
  _jq_opts+=(
    --raw-output
  )
  _contract_address="$( \
    cat \
      "${_contract_output_file}" | \
      jq \
        "${_jq_opts[@]}" \
        ".target")"
  _tx_deployment="$( \
    cat \
      "${_tx_deployment_output_file}" | \
      jq \
        "${_jq_opts[@]}" \
        ".hash")"
  _msg=(
    "Publishing contract '${_target_contract}'"
    "on the on-chain Ethereum"
    "Virtual Machine Contracts' Source Index."
  )
  _msg_info \
    "${_msg[*]}"
  evm-contract-source-publish \
    "${_evm_contract_source_publish_opts[@]}" \
    "${_target_network}" \
    "${_contract_address}" \
    "${_target_contract}" \
    "${_tx_deployment}" \
    "${_evm_version}" \
    "solc" \
    "${_solc_version}"
}

_evm_deployer() {
  local \
    _wallet_path="${1}" \
    _wallet_password="${2}" \
    _wallet_seed="${3}" \
    _target_network="${4}" \
    _rpc_selection="${5}" \
    _api_key_path="${6}" \
    _contract_abi_path="${7}" \
    _contract_bytecode_path="${8}" \
    _contract_compiler_output_path="${9}" \
    _compiler_backend="${10}" \
    _solc_version="${11}" \
    _evm_version="${12}" \
    _retries_max="${13}" \
    _call_timeout="${14}" \
    _index_publish="${15}" \
    _cache_dir="${16}" \
    _contract_output_file="${17}" \
    _tx_deployment_output_file="${18}" \
    _contract \
    _target_contracts=() \
    _node_run_opts=() \
    _deployer \
    _deployer_args=() \
    _rpc_backend
  shift \
    18
  _target_contracts+=(
    "$@"
  )
  if [[ "${quiet}" == "n" ]]; then
    _evm_contract_source_publish_opts+=(
      -v
    )
    _node_run_opts+=(
      -v
    )
  fi
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  _deployer="$( \
    _get_lib)/${app_name}/deployer"
  _rpc_backend_get \
    "${_target_network}" \
    "${_rpc_selection}"
  for _contract in "${_target_contracts[@]}"; do
    if [[ "${_contract_bytecode_path}" == "" && \
          "${_contract_compiler_output_path}" == "" ]]; then
      _contract_build \
        "${_contract}" \
        "${_compiler_backend}" \
        "${_solc_version}" \
        "${_evm_version}"
    fi
    _deployer_args+=(
      "${quiet}"
      "${_retries_max}"
      "${_call_timeout}"
      "${_wallet_seed}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_compiler_output_path}"
      "${_rpc_backend}"
      "${_api_key_path}"
      "${_contract_output_file}"
      "${_tx_deployment_output_file}"
    )
    _msg=(
      "Running '$(basename "${_cmd}")'"
      "with options '${_args[*]}'."
    )
    _msg_info \
      "${_msg[*]}"
    node-run \
      "${_node_run_opts[@]}" \
      "${_deployer}" \
      "${_deployer_args[@]}"
    if [[ "${_index_publish}" == "y" ]]; then
      _contract_index_publish \
        "${_contract}" \
        "${_target_network}" \
        "${_solc_version}" \
        "${_evm_version}" \
        "${_contract_output_file}" \
        "${_tx_deployment_output_file}"
    fi
  done
}

_contract_bytecode_auto_detect() {
  local \
    _bytecode \
    _name \
    _source \
    _target
  _bytecode=""
  _source="${target_contracts}"
  _name="${_source%.*}"
  _target="${_name}.bin"
  if [ -e "${_target}" ]; then
    _bytecode="${_target}"
  fi
  _set_override \
    "contract" \
    "bytecode" \
    "${_bytecode}"
}

_file_hash() {
  local \
    _file="${1}"
  sha256sum \
    "${_file}" | \
    awk \
      '{print $1}'
}

_output_dir_default_setup() {
  local \
    _output_dir \
    _output_file \
    _contract_name \
    _contract_dir \
    _network_dir \
    _contract_hash
  if [[ ! -v "output_dir" ]]; then
    _contract_name="$( \
      basename \
        "${target_contracts[0]}")"
    _contract_hash="$( \
      _file_hash \
        "${target_contracts[0]}")"
    _contract_dir="${cache_dir}/${_contract_name}/${_contract_hash}"
    _network_dir="${_contract_dir}/${target_network}"
    output_dir="$( \
      mktemp \
        -u \
        -d \
        -p \
          "${_network_dir}")"
    mkdir \
      -p \
      "${output_dir}"
    chmod \
      700 \
      "${output_dir}"
  fi
}

# This works only for a single file actually
_contract_output_file_auto_detect() {
  local \
    _output_file
  _output_dir_default_setup
  _output_file="${output_dir}/contract.json"
  _set_override \
    "contract" \
    "output_file" \
    "${_output_file}"
}

# This works only for a single file actually
_tx_deployment_output_file_auto_detect() {
  local \
    _output_file
  _output_dir_default_setup
  _output_file="${output_dir}/tx_deployment.json"
  _set_override \
    "tx_deployment" \
    "output_file" \
    "${_output_file}"
}


_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "deploy" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/${app_name}"
  _set_override \
    "target" \
    "network" \
    "100"
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "y"
  _set_override \
    "compiler" \
    "backend" \
    ""
  _set_override \
    "solc" \
    "version" \
    ""
  _set_override \
    "evm" \
    "version" \
    ""
  _set_override \
    "retries" \
    "max" \
    "10"
  _set_override \
    "call" \
    "timeout" \
    "300000"
  _set_override \
    "index" \
    "publish" \
    "n"
  if [[ "${target_contracts[*]}" != "" ]]; then
    _set_override \
      "contract" \
      "abi" \
      ""
    _set_override \
      "contract" \
      "compiler_output" \
      ""
    _contract_bytecode_auto_detect
    _contract_output_file_auto_detect
    _tx_deployment_output_file_auto_detect
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _networks_amount \
    _usage_text
  _networks_amount="$( \
    evm-chains-info \
      -i \
        "amount")"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine compatible blockchain network contract deployer.

Usage:
  ${app_name}
    [options]
    <contract_file>

  networks:
    total EVM networks available:
      ${_networks_amount}
    see which with "evm-chains-info"

  options:
     -A <contract_abi>               Contract ABI.
                                     Default: ${contract_abi}
     -B <contract_bytecode>          Contract bytecode.
                                     Default: ${contract_bytecode}
     -O <contract_compiler_output>   Contract compiler output.
                                     Default: ${contract_compiler_output}
     -b <compiler_backend>           It can be 'solc' or 'hardhat'.
                                     Default: ${compiler_backend}
     -C <solc_version>               Solc version.
                                     Default: ${solc_version}
     -e <evm_version>                EVM version.
                                     Default: ${evm_version}
     -r <retries_max>                Maximum number of retries before
                                     failing.
                                     Default: ${retries_max}
     -T <call_timeout>               Maximum number of milliseconds before
                                     declaring the call failed.
                                     Default: ${call_timeout}
     -R <rpc_selection>              RPC selection method.
                                     Default: ${rpc_selection}
     -o <contract_output_file>       Where to save a JSON representing
                                     the contract object resulting from
                                     the deployment.
                                     Default: ${contract_output_file}
     -x <tx_deployment_output_file>  Where to save a JSON representing
                                     the transaction object resulting from
                                     the deployment.
                                     Default: ${tx_deployment_output_file}
     -P                              Publishes the contract's source
                                     on the on-chain, network-neutral,
                                     network-independent, uncensorable
                                     EVM Contracts Source Index.
                                     Default: ${index_publish}

  credentials options:
     -N <wallet_name>                EVM wallet name.
                                     Default: ${wallet_name}
     -w <wallet_path>                EVM wallet file path.
                                     Default: ${wallet_path}
     -p <wallet_path>                EVM wallet password file.
                                     Default: ${wallet_password}
     -s <wallet_seed>                EVM wallet seed file.
                                     Default: ${wallet_seed}
     -k <api_key>                    Etherscan-like service key.
                                     Default: ${api_key}

  libEVM options:
     -n <network>                    EVM network name.
                                     Default: ${target_network}

  application options:
     -W <cache_dir>                  Work directory.
                                     Default: ${cache_dir}

     -h                              This message.
     -c                              Enable color output
     -v                              Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Deploy date:   ${deploy_date}"
  _msg_info "                      Contract ABI:   ${contract_abi}"
  _msg_info "                 Contract bytecode:   ${contract_bytecode}"
  _msg_info "          Contract compiler output:   ${contract_compiler_output}"
  _msg_info "                      Solc version:   ${solc_version}"
  _msg_info "                       EVM version:   ${evm_version}"
  _msg_info "                  Compiler backend:   ${compiler_backend}"
  _msg_info "                   Maximum retries:   ${retries_max}"
  _msg_info "              RPC selection method:   ${rpc_selection}"
  _msg_info "               Publish source code:   ${index_publish}"
  _msg_info "              Contract output file:   ${contract_output_file}"
  _msg_info "Deployment transaction output file:   ${tx_deployment_output_file}"
  _msg_info "                  Target contracts:   ${target_contracts[*]}"
  _msg_info "                  LibEVM options:"
  _msg_info "                    Target network:   ${target_network}"
  _msg_info "             Credentials options:"
  _msg_info "                       Wallet name:   ${wallet_name}"
  _msg_info "                       Wallet path:   ${wallet_path}"
  _msg_info "                   Wallet password:   ${wallet_password}"
  _msg_info "                       Wallet seed:   ${wallet_seed}"
  _msg_info "                           API key:   ${api_key}"
  _msg_info "             Credentials options:"
  _msg_info "                   Cache directory:   ${cache_dir}"
}

_globals
_global_variables
_requirements
_libevm_global_variables
_libevm_app_global_variables
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "R:o:r:x:b:e:C:T:P" \
    "A:B:O:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    R) \
      override_rpc_selection="${OPTARG}" ;;
    o) \
      override_contract_output_file="${OPTARG}" ;;
    r) \
      override_retries_max="${OPTARG}" ;;
    x) \
      override_tx_deployment_output_file="${OPTARG}" ;;
    b) \
      override_compiler_backend="${OPTARG}" ;;
    e) \
      override_evm_version="${OPTARG}" ;;
    C) \
      override_solc_version="${OPTARG}" ;;
    T) \
      override_call_timeout="${OPTARG}" ;;
    P) \
      override_index_publish="y" ;;
    A) \
      override_contract_abi="${OPTARG}" ;;
    B) \
      override_contract_bytecode="${OPTARG}" ;;
    O) \
      override_contract_compiler_output="${OPTARG}" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    W) \
      override_cache_dir="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( 0 == "$#" )); then
  _msg_error \
    "No contract file specified." \
    1
fi
target_contracts+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${rpc_selection}"
  "${api_key}"
  "${contract_abi}"
  "${contract_bytecode}"
  "${contract_compiler_output}"
  "${compiler_backend}"
  "${solc_version}"
  "${evm_version}"
  "${retries_max}"
  "${call_timeout}"
  "${index_publish}"
  "${cache_dir}"
  "${contract_output_file}"
  "${tx_deployment_output_file}"
  "${target_contracts[@]}"
)
_evm_deployer \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
